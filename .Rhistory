names(my_gapminder$continent)
facter(my_gapminder$continent)
facters(my_gapminder$continent)
View(mgm)
mgm <- my_gapminder
le <- mgm$lifeExp
my_lm(formula = lifeExp ~ gdpPercap + continent, mgm)
ml <- my_lm(formula = lifeExp ~ gdpPercap + continent, mgm)
plot(ml)
ml <- my_lm(formula = lifeExp ~ gdpPercap + continent, mgm)
ml <- my_lm(formula = lifeExp ~ gdpPercap, mgm)
ml <- my_lm(formula = lifeExp ~ gdpPercap, mgm)
ml
plot(ml)
ml <- my_lm(formula = lifeExp ~ gdpPercap, mgm)
ml
ml <- my_lm(formula = lifeExp ~ gdpPercap, mgm)
plot(ml)
my_lm(formula = lifeExp ~ gdpPercap, mgm)
ml <- my_lm(formula = lifeExp ~ gdpPercap, mgm)
ml
ml$Estimate
ml$Estimate[2]
ml <- my_lm(formula = lifeExp ~ gdpPercap + continent, mgm)
ml <- my_lm(formula = lifeExp ~ gdpPercap + continent, mgm)
ml
ml$Estimate[2]
ml$Pr...t..[2]
mod_fits <- fitted(my_lm)
library(stat302util)
devtools::install_github("hugoliao330/stat302util", build_vignette = TRUE, build_opts = c())
library(stat302util)
help(package = "stat302util", help_type = "html")
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, 10)
cv_mc <- rep(NA, 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
train_mc[i] <- result$cv_err
cv_mc[i] <- mean(true_cl != result$class)
}
train_mc
cv_mc
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, 10)
cv_mc <- rep(NA, 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
train_mc[i] <- result$cv_err
cv_mc[i] <- sum(mean(true_cl != result$class))
}
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, 10)
cv_mc <- rep(NA, 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
train_mc[i] <- result$cv_err
cv_mc[i] <- mean(true_cl != result$class)
}
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, 10)
cv_mc <- rep(NA, 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
train_mc[i] <- result$cv_err
cv_mc[i] <- mean(true_cl != result$class)
}
# show results
train_mc
cv_mc
?my_rf_cv
library(stat302util)
devtools::install_github("hugoliao330/stat302util", build_vignette = TRUE, build_opts = c())
#mod_fits <- fitted(my_lm)
#my_df <- data.frame(actual = mtcars$mpg, fitted = mod_fits)
#ggplot(my_df, aes(x = fitted, y = actual)) +
#  geom_point() +
#  geom_abline(slope = 1, intercept = 0, col = "red", lty = 2) +
#  theme_bw(base_size = 15) +
#  labs(x = "Fitted values", y = "Actual values", title = "Actual vs. Fitted") +
#  theme(plot.title = element_text(hjust = 0.5))
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, 10)
cv_mc <- rep(NA, 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
train_mc[i] <- result$cv_err
cv_mc[i] <- mean(true_cl != result$class)
}
# show results
train_mc
cv_mc
library(stat302util)
help(package = "stat302util", help_type = "html")
help(package = "stat302util", help_type = "html")
utils::browseVignettes(package = "stat302util")
utils::browseVignettes(package = "stat302util")
utils::browseVignettes(package = "stat302util")
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, 10)
cv_mc <- rep(NA, 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
train_mc[i] <- result$cv_err
cv_mc[i] <- mean(true_cl != result$class)
}
# show results
train_mc
cv_mc
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, 10)
cv_mc <- rep(NA, 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
train_mc[i] <- result$cv_err
#cv_mc[i] <- mean(true_cl != result$class)
}
# show results
train_mc
cv_mc
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, 10)
cv_mc <- rep(NA, 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
#train_mc[i] <- result$cv_err
cv_mc[i] <- mean(true_cl != result$class)
}
# show results
train_mc
cv_mc
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, 10)
cv_mc <- rep(NA, 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
#train_mc[i] <- result$cv_err
#cv_mc[i] <- mean(true_cl != result$class)
}
# show results
train_mc
cv_mc
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, length = 10)
cv_mc <- rep(NA, length = 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
train_mc[i] <- result$cv_err
cv_mc[i] <- mean(true_cl != result$class)
}
# show results
train_mc
cv_mc
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, length = 10)
cv_mc <- rep(NA, length = 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
#train_mc[i] <- result$cv_err
#cv_mc[i] <- mean(true_cl != result$class)
}
# show results
train_mc
cv_mc
data.frame(mgm$gdpPercap, mgm$lifeExp)
a <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- data.frame(mgm$continent)
train_mc <- rep(NA, length = 10)
cv_mc <- rep(NA, length = 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
#train_mc[i] <- result$cv_err
#cv_mc[i] <- mean(true_cl != result$class)
}
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- data.frame(mgm$continent)
train_mc <- rep(NA, length = 10)
cv_mc <- rep(NA, length = 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
#train_mc[i] <- result$cv_err
#cv_mc[i] <- mean(true_cl != result$class)
}
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, length = 10)
cv_mc <- rep(NA, length = 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
#train_mc[i] <- result$cv_err
#cv_mc[i] <- mean(true_cl != result$class)
}
# show results
train_mc
cv_mc
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse)
library(ggpubr)
library(class)
library(randomForest)
# load data 'iris'
data(iris)
my_knn_cv_2 <- function(train, cl, k_nn, k_cv) {
fold <- sample(rep(1:k_cv, length = nrow(train)))
data <- data.frame(train, "fold" = fold)
cl_folded <- data.frame(cl, "fold" = fold)
misclassification_rate <- rep(NA, length = k_cv)
for (i in 1:k_cv) {
data_train <- data %>% filter(fold != i)
data_test <- data %>% filter(fold == i)
class <- cl_folded %>% filter(fold != i)
prediction <- knn(train = data_train[, -ncol(data_train)],
test = data_test[, -ncol(data_train)],
cl = class[,1], k = k_nn)
misclassification_rate[i] <- mean(prediction != class[, 1])
}
class <- knn(train, train, cl, k_nn)
return(list("class" = class,
"cv_err" = mean(misclassification_rate)))
}
my_knn_cv_2(train, true_cl, 1, 1)
my_knn_cv_2(train, true_cl, 1, 5)
my_knn_cv_2(train, true_cl, 1, 1)
my_knn_cv_2 <- function(train, cl, k_nn, k_cv) {
fold <- sample(rep(1:k_cv, length = nrow(train)))
data <- data.frame(train, "fold" = fold)
cl_folded <- data.frame(cl, "fold" = fold)
misclassification_rate <- rep(NA, length = k_cv)
for (i in 1:k_cv) {
data_train <- data %>% filter(fold != i)
data_test <- data %>% filter(fold == i)
class <- cl_folded %>% filter(fold != i)
prediction <- knn(train = data_train[-"fold"],
test = data_test[-"fold"],
cl = class[,1], k = k_nn)
misclassification_rate[i] <- mean(prediction != class[, 1])
}
class <- knn(train, train, cl, k_nn)
return(list("class" = class,
"cv_err" = mean(misclassification_rate)))
}
my_knn_cv_2(train, true_cl, 2, 5)
my_knn_cv_2 <- function(train, cl, k_nn, k_cv) {
fold <- sample(rep(1:k_cv, length = nrow(train)))
data <- data.frame(train, "fold" = fold)
cl_folded <- data.frame(cl, "fold" = fold)
misclassification_rate <- rep(NA, length = k_cv)
for (i in 1:k_cv) {
data_train <- data %>% filter(fold != i)
data_test <- data %>% filter(fold == i)
class <- cl_folded %>% filter(fold != i)
prediction <- knn(train = data_train[-c("fold")],
test = data_test[-("fold")],
cl = class[,1], k = k_nn)
misclassification_rate[i] <- mean(prediction != class[, 1])
}
class <- knn(train, train, cl, k_nn)
return(list("class" = class,
"cv_err" = mean(misclassification_rate)))
}
my_knn_cv_2(train, true_cl, 2, 5)
my_knn_cv_2 <- function(train, cl, k_nn, k_cv) {
fold <- sample(rep(1:k_cv, length = nrow(train)))
data <- data.frame(train, "fold" = fold)
cl_folded <- data.frame(cl, "fold" = fold)
misclassification_rate <- rep(NA, length = k_cv)
for (i in 1:k_cv) {
data_train <- data %>% filter(fold != i)
data_test <- data %>% filter(fold == i)
class <- cl_folded %>% filter(fold != i)
prediction <- knn(train = data_train[-c(fold)],
test = data_test[-c(fold)],
cl = class[,1], k = k_nn)
misclassification_rate[i] <- mean(prediction != class[, 1])
}
class <- knn(train, train, cl, k_nn)
return(list("class" = class,
"cv_err" = mean(misclassification_rate)))
}
my_knn_cv_2(train, true_cl, 2, 5)
library(stat302util)
my_knn_cv(train, true_cl, 2, 5)
library(stat302util)
my_knn_cv(train, true_cl, 2, 5)
library(stat302util)
my_knn_cv(train, true_cl, 2, 5)
library(stat302util)
my_knn_cv(train, true_cl, 1, 5)
library(stat302util)
my_knn_cv(train, true_cl, 1, 5)
library(stat302util)
my_knn_cv(train, true_cl, 1, 5)
library(stat302util)
library(stat302util)
my_knn_cv(train, true_cl, 1, 5)
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, length = 10)
cv_mc <- rep(NA, length = 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
train_mc[i] <- result$cv_err
cv_mc[i] <- mean(true_cl != result$class)
}
# show results
train_mc
cv_mc
train <- data.frame(mgm$gdpPercap, mgm$lifeExp)
true_cl <- mgm$continent
train_mc <- rep(NA, length = 10)
cv_mc <- rep(NA, length = 10)
for (i in 1:10) {
result <- my_knn_cv(train = train, cl = true_cl, k_nn = i, k_cv = 5)
train_mc[i] <- result$cv_err
cv_mc[i] <- mean(true_cl != result$class)
}
# show results
train_mc
cv_mc
library(stat302util)
knitr::opts_chunk$set(echo = TRUE)
# load libraries
library(tidyverse)
library(ggpubr)
library(class)
library(randomForest)
# load data 'iris'
data(iris)
# Function: my_knn_cv
# Input: train, input data frame
# Input: cl, true class value of the training data
# Input: k_nn, integer representing the number of neighbors
# Input: k_cv, integer representing the number of folds
# Output: a list with objects class - a vector of the predicted class y_hat_i
#         for all obsevations, and cv_err - a numeric with the cross validation
#         misclassification error
my_knn_cv_1 <- function(train, cl, k_nn, k_cv) {
fold <- sample(rep(1:k_cv, length = nrow(train)))
data <- data.frame(train, "fold" = fold)
cl_folded <- data.frame(cl, "fold" = fold)
misclassification_rate <- rep(NA, length = k_cv)
for (i in 1:k_cv) {
data_train <- data %>% filter(fold != i)
data_test <- data %>% filter(fold == i)
class <- cl_folded %>% filter(fold != i)
prediction <- knn(train = data_train[, -ncol(data_train)], test = data_test[, -ncol(data_train)], cl = class[, 1], k = k_nn)
misclassification_rate[i] <- mean(prediction != class[, 1])
}
class <- knn(train, train, cl, k_nn)
return(list("class" = class,
"cv_err" = mean(misclassification_rate)))
}
my_knn_cv_1(train, true_cl, 1, 5)
# Function: my_knn_cv
# Input: train, input data frame
# Input: cl, true class value of the training data
# Input: k_nn, integer representing the number of neighbors
# Input: k_cv, integer representing the number of folds
# Output: a list with objects class - a vector of the predicted class y_hat_i
#         for all obsevations, and cv_err - a numeric with the cross validation
#         misclassification error
my_knn_cv_1 <- function(train, cl, k_nn, k_cv) {
fold <- sample(rep(1:k_cv, length = nrow(train)))
data <- data.frame(train, "fold" = fold)
cl_folded <- data.frame(cl, "fold" = fold)
misclassification_rate <- rep(NA, length = k_cv)
for (i in 1:k_cv) {
data_train <- data %>% filter(fold != i)
data_test <- data %>% filter(fold == i)
class <- cl_folded %>% filter(fold != i)
true_class <- cl_folded %>% filter(fold == 1)
prediction <- knn(train = data_train[, -ncol(data_train)], test = data_test[, -ncol(data_train)], cl = class[, 1], k = k_nn)
misclassification_rate[i] <- mean(prediction != true_class[, 1])
}
class <- knn(train, train, cl, k_nn)
return(list("class" = class,
"cv_err" = mean(misclassification_rate)))
}
my_knn_cv_1(train, true_cl, 1, 5)
my_knn_cv_2(train, true_cl, 1, 5)
my_knn_cv(train, true_cl, 1, 5)
my_rf_cv(mgm$gdpPercap, mgm$lifeExp, 2)
my_rf_cv(mgm$gdpPercap, mgm$lifeExp, 2)
library(stat302util)
my_rf_cv(mgm$gdpPercap, mgm$lifeExp, 2)
library(stat302util)
my_rf_cv(mgm$gdpPercap, mgm$lifeExp, 2)
my_rf_cv(lifeExp ~ gdpPercap, mgm, 2)
my_rf_cv(mgm$lifeExp ~ mgm$gdpPercap, mgm, 2)
my_rf_cv(mgm$lifeExp ~ mgm$gdpPercap, mgm, 2)
my_rf_cv( mgm$gdpPercap, mgm$lifeExp, 2)
library(stat302util)
my_rf_cv( mgm$gdpPercap, mgm$lifeExp, 2)
my_rf_cv( mgm$gdpPercap, mgm$lifeExp, 2)
ncol(mgm$gdpPercap)
mgm$gdpPercap
mgm["gdpPercap"]
my_rf_cv(mgm["gdpPercap"], mgm["lifeExp"], 2)
library(stat302util)
my_rf_cv(mgm["gdpPercap"], mgm["lifeExp"], 2)
mse <- matrix(NA, nrow = 30, ncol = 3)
for (k in c(2, 5, 10)) {
for (i in 1:30) {
mse[i, k] <- my_rf_cv(mgm["gdpPercap"], mgm["lifeExp"], k)
}
}
mse <- matrix(NA, nrow = 30, ncol = 3)
j <- 0
for (k in c(2, 5, 10)) {
j <- j + 1
for (i in 1:30) {
mse[i, k] <- my_rf_cv(mgm["gdpPercap"], mgm["lifeExp"], k)
}
}
mse <- matrix(NA, nrow = 30, ncol = 3)
k <- c(2, 5, 10)
for (j in 1:3) {
for (i in 1:30) {
mse[i, k] <- my_rf_cv(mgm["gdpPercap"], mgm["lifeExp"], k[j])
}
}
mse <- matrix(NA, nrow = 30, ncol = 3)
k <- c(2, 5, 10)
for (j in 1:3) {
for (i in 1:30) {
mse[i, j] <- my_rf_cv(mgm["gdpPercap"], mgm["lifeExp"], k[j])
}
}
mse
library(ggplot2)
colnames(mse) <- c("2", "5", "10")
mse
ggplot(data.frame(mse)) +
geom_boxplot()
ggplot(data.frame(mse), aes(x = k, y = values)) +
geom_boxplot()
dat <- stack(as.data.frame(myMatrix))
dat <- stack(as.data.frame(mse))
ggplot(dat, aes(x = k, y = values)) +
geom_boxplot()
dat <- stack(as.data.frame(mse))
ggplot(dat, aes(y = values)) +
geom_boxplot()
dat <- stack(as.data.frame(mse))
ggplot(dat) +
geom_boxplot(aes(x = k, y = values))
dat <- stack(as.data.frame(mse))
ggplot(dat) +
geom_boxplot(aes(x = ind, y = values))
dat <- stack(as.data.frame(mse))
ggplot(dat) +
geom_boxplot(aes(x = ind, y = values)) +
labs(title = "MSE with respect to k", x = "k", y = "value")
mean(mse)
mse
mean(mse[,1])
data.frame("mean" = c(mean(mse[,1]), mean(mse[,2]), mean(mse[,3])),
"standard deviation" = c(sd(mse[,1]), sd(mse[,2]), sd(mse[,3])))
df <- data.frame("mean" = c(mean(mse[,1]), mean(mse[,2]), mean(mse[,3])),
"standard deviation" = c(sd(mse[,1]), sd(mse[,2]), sd(mse[,3])))
df.as.table
df <- data.frame("mean" = c(mean(mse[,1]), mean(mse[,2]), mean(mse[,3])),
"standard deviation" = c(sd(mse[,1]), sd(mse[,2]), sd(mse[,3])))
as.table(df)
df <- data.frame("mean" = c(mean(mse[,1]), mean(mse[,2]), mean(mse[,3])),
"standard deviation" = c(sd(mse[,1]), sd(mse[,2]), sd(mse[,3])))
as.data.table(df)
df <- data.frame("mean" = c(mean(mse[,1]), mean(mse[,2]), mean(mse[,3])),
"standard deviation" = c(sd(mse[,1]), sd(mse[,2]), sd(mse[,3])))
rownames(df) <- c("k=2", "k=5", "k=10")
df <- data.frame("mean" = c(mean(mse[,1]), mean(mse[,2]), mean(mse[,3])),
"standard deviation" = c(sd(mse[,1]), sd(mse[,2]), sd(mse[,3])))
rownames(df) <- c("k=2", "k=5", "k=10")
df
library(stat302util)
mse <- matrix(NA, nrow = 30, ncol = 3)
k <- c(2, 5, 10)
for (j in 1:3) {
for (i in 1:30) {
mse[i, j] <- my_rf_cv(mgm$gdpPercap, mgm$lifeExp, k[j])
}
}
mse <- matrix(NA, nrow = 30, ncol = 3)
k <- c(2, 5, 10)
for (j in 1:3) {
for (i in 1:30) {
mse[i, j] <- my_rf_cv(mgm["gdpPercap"], mgm["lifeExp"], k[j])
}
}
lifeE <- mgm["lifeExp"]
gdpP <- mgm["gdpPercap"]
mse <- matrix(NA, nrow = 30, ncol = 3)
k <- c(2, 5, 10)
for (j in 1:3) {
for (i in 1:30) {
mse[i, j] <- my_rf_cv(gdpP, lifeE, k[j])
}
}
